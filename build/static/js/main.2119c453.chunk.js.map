{"version":3,"sources":["images/dryleaves.jpeg","components/Home.js","data.js","components/Edibles.js","components/Item.js","components/Leaves.js","components/LeafItem.js","components/Cart.js","hooks/useLocalStorage.js","hooks/useDarkMode.js","App.js","serviceWorker.js","index.js","images/gummi.jpeg","images/button-cart.png","images/darkmode-cart.png"],"names":["module","exports","Home","className","edible","id","imageSRC","description","qty","leaf","imgSRC","Edibles","props","darkmode","map","item","path","to","src","gummi","width","Item","find","match","params","document","getElementsByClassName","htmlFor","name","onClick","e","preventDefault","qtyInt","parseInt","value","result","console","log","darkmodeCart","cartButton","Leaves","dryleaves","LeafItem","Cart","useLocalStorage","key","initialValue","useState","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setItem","stringify","useDarkMode","setValue","body","querySelector","useEffect","classList","remove","add","App","leavesValue","darkMode","setDarkMode","onChange","exact","component","render","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2119c453.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dryleaves.c9d0fdc7.jpeg\";","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"edible-single\">\r\n            <p className=\"aTagForEdibles centertext\">Welcome to Puff Palace.</p>\r\n            <p className=\"aTagForEdibles centertext\" >We pride ourselves on good customer service</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","export const edible = [\r\n{\r\n    id: 1,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n    qty: 0\r\n},\r\n{\r\n    id: 2,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n    qty: 0\r\n},\r\n{\r\n    id: 3,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n    qty: 0\r\n},\r\n{\r\n    id: 4,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n    qty: 0\r\n},\r\n{\r\n    id: 5,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n},\r\n{\r\n    id: 6,\r\n    imageSRC: '../images/gummi.jpeg',\r\n    description: \"Gummi\",\r\n    qty: 0\r\n}\r\n]\r\n\r\nexport const leaf = [\r\n    {\r\n        id: 1,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n    {\r\n        id: 2,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n    {\r\n        id: 3,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n    {\r\n        id: 4,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n    {\r\n        id: 5,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n    {\r\n        id: 6,\r\n        imgSRC: '',\r\n        description: 'Skunk',\r\n        qty: 0\r\n    },\r\n]","import React from 'react';\r\nimport { edible } from '../data';\r\nimport { Link } from 'react-router-dom'\r\nimport gummi from '../images/gummi.jpeg';\r\n\r\nconst Edibles = (props) => {\r\nreturn(\r\n    <div className={`edible-container ${props.darkmode ? \"\" : \"dark-mode-black-background\"}`}>\r\n    {edible.map(item =>{\r\n      return(\r\n          <Link className=\"aTagForEdibles\" path to={`./edibles/${item.id}`}>\r\n              <div className=\"columns\">\r\n              <p>{item.description}</p>\r\n              <img src={gummi} width=\"500px\"/>\r\n              </div>\r\n          </Link>\r\n      )\r\n  })})\r\n    </div>\r\n)}\r\n\r\nexport default Edibles","import React from 'react';\r\nimport gummi from '../images/gummi.jpeg';\r\nimport cartButton from '../images/button-cart.png';\r\nimport darkmodeCart from '../images/darkmode-cart.png'\r\nimport { Link} from 'react-router-dom';\r\n\r\nexport const Item = (props) =>{\r\n    const item = props.item.find( item => `${item.id}` === props.match.params.id )\r\n    let qty = document.getElementsByClassName(\"qty\");\r\n\r\n    const addToCart = (e) =>{\r\n    e.preventDefault()\r\n    let qtyInt = parseInt(qty[0].value)\r\n    let result = item.qty + qtyInt\r\n    console.log(result);\r\n    qty[0].value = \"\";\r\n    }\r\n    return (\r\n        <div className={`edible-single`}>\r\n        <p className=\"aTagForEdibles\">{item.description}</p>\r\n        <img src={gummi} width=\"500px\"/>\r\n        <form>\r\n        <div className=\"flex-cart\">\r\n        <div className=\"cart\">\r\n        <label className=\"qtyLabel\" htmlFor=\"qty\">\r\n        QTY:\r\n        <input\r\n        name=\"qty\"\r\n        className=\"qty\"\r\n        id={item.id}\r\n        />\r\n        </label>\r\n        <button onClick={addToCart} className=\"add-cart-item\">Add to Cart</button>\r\n        </div>\r\n        <Link className=\"go-to-cart\" path to=\"/cart\"><img className=\"cartImage\" width=\"100px\" src={props.darkmode ? darkmodeCart : cartButton}/></Link>\r\n        </div>\r\n        </form>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { leaf } from '../data';\r\nimport { Link } from 'react-router-dom';\r\nimport dryleaves from '../images/dryleaves.jpeg'\r\n\r\nconst Leaves = (props) =>{\r\n    return(\r\n <div className=\"edible-container\">\r\n    {leaf.map(item =>{\r\n        return(\r\n            <Link className=\"aTagForEdibles\" path to={`/leaves/${item.id}`}>\r\n            <div className=\"columns\">\r\n                <p>\r\n                    {item.description}\r\n                </p>\r\n                <img src={dryleaves} width=\"500px\"/>\r\n            </div>\r\n            </Link>\r\n        )\r\n    })}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Leaves;","import React from 'react';\r\nimport dryleaves from '../images/dryleaves.jpeg';\r\nimport cartButton from '../images/button-cart.png';\r\nimport darkmodeCart from '../images/darkmode-cart.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst LeafItem = (props) =>{\r\n    console.log(props)\r\n    let item = props.item.find(item => `${item.id}` === props.match.params.id)\r\n    let qty = document.getElementsByClassName(\"qty\");\r\n\r\n    const addToCart = (e) =>{\r\n        e.preventDefault()\r\n        let qtyInt = parseInt(qty[0].value)\r\n        let result = item.qty + qtyInt\r\n        console.log(result);\r\n        qty[0].value = \"\";\r\n        }\r\n\r\n    return(\r\n        <div className={`edible-single`}>\r\n            <img src={dryleaves} width=\"500px\"></img>\r\n            <p className=\"aTagForEdibles\">{item.description}</p>\r\n            <form>\r\n        <div className=\"flex-cart\">\r\n        <div className=\"cart\">\r\n        <label className=\"qtyLabel\" htmlFor=\"qty\">\r\n        QTY:\r\n        <input\r\n        name=\"qty\"\r\n        className=\"qty\"\r\n        id={item.id}\r\n        />\r\n        </label>\r\n        <button onClick={addToCart} className=\"add-cart-item\">Add to Cart</button>\r\n        </div>\r\n        <Link className=\"go-to-cart\" path to=\"/cart\"><img width=\"100px\" src={props.darkmode ? darkmodeCart : cartButton}/></Link>\r\n        </div>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeafItem;","import React from 'react';\r\n\r\nexport const Cart = () =>{\r\n    return(\r\n        <div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\n\r\nfunction useLocalStorage (key, initialValue){\r\nconst [storedValue, setStoredValue] = useState(() => {\r\nconst item = window.localStorage.getItem(key);\r\nreturn item ? JSON.parse(item) : initialValue;\r\n});\r\nconst setValue = value => {\r\n    setStoredValue(value);\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n}\r\nreturn [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage","import React, { useEffect } from 'react';\r\nimport useLocalStorage from './useLocalStorage'\r\n\r\nfunction useDarkMode(initialValue){\r\n    const [value, setValue] = useLocalStorage(initialValue)\r\n    let body = document.querySelector(\"body\")\r\n    useEffect(() =>{\r\n    if (value === false){\r\n      body.classList.remove(\"dark-mode\");\r\n\r\n    } else if(value === true) {\r\n      body.classList.add(\"dark-mode\");\r\n    }\r\n  },[value])\r\n  return [value, setValue]\r\n  }\r\n\r\n\r\nexport default useDarkMode;","import React, {useState} from 'react';\nimport './App.css';\nimport {Route, Link} from 'react-router-dom';\nimport Home from './components/Home';\nimport Edibles from './components/Edibles';\nimport { Item } from './components/Item';\nimport { edible } from './data';\nimport { leaf } from './data';\nimport Leaves from './components/Leaves';\nimport LeafItem from './components/LeafItem';\nimport { Cart } from './components/Cart';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport useDarkMode from './hooks/useDarkMode';\n\nfunction App() {\n  const [value, setValue] = useState(edible);\n  const [leavesValue, setLeavesValue] = useState(leaf);\n  const [darkMode, setDarkMode] = useDarkMode(false)\n\n  let darkmode = document.getElementsByClassName(\"darkmode\");\n  const toggleButton = () => {\n    setDarkMode(!darkMode)\n    }\n  const changing = () =>{\n    if(darkMode === false){\n      darkmode[0].classList.add(\"darkmargin\")\n\n      setDarkMode(true)\n    }else{\n      darkmode[0].classList.remove(\"darkmargin\")\n      setDarkMode(false)\n    }\n  }\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link className=\"aTag\" path to=\"/\">Home</Link>\n        <Link className=\"aTag\" path to=\"/edibles\">Edibles</Link>\n        <Link className=\"aTag\" path to=\"/leaves\">Leaves</Link>\n        <Link className=\"aTag\" path to=\"/accessories\">Accessories</Link>\n      </header>\n      <div className=\"dark-mode__toggle\">\n        <div\n          onClick={changing}\n          onChange={toggleButton}\n          className={\"darkmode\"}\n        />\n      </div>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/edibles\" component={Edibles} />\n        <Route exact path=\"/edibles/:id\" render={props => <Item {...props} item={value} darkmode={darkMode}/>}/>\n        <Route exact path=\"/leaves\" component={Leaves} />\n        <Route exact path=\"/leaves/:id\" render={props => <LeafItem {...props} item={leavesValue} darkmode={darkMode}/> } />\n        <Route exact path=\"/cart\" component={Cart} />\n        </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gummi.74662687.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/button-cart.f7df56c1.png\";","module.exports = __webpack_public_path__ + \"static/media/darkmode-cart.86af8ad0.png\";"],"sourceRoot":""}